@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNet.Mvc.Rendering
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model AutomaticSharp.Demo.ViewModels.VehicleViewModel

@{
    ViewData["Title"] = "Home Page";
}

<h2>@Html.ActionLink("All Vehicles", "Index", "Home") &gt; @(Model.DisplayName ?? Model.ComputedName)</h2>
<hr />
<h3>Details</h3>
<form class="form-horizontal">
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label class="col-sm-3 control-label">Id</label>
                <div class="col-sm-9">
                    <p class="form-control-static">@Model.Id</p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-3 control-label">Full Name</label>
                <div class="col-sm-9">
                    <p class="form-control-static">@Model.ComputedName</p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-3 control-label">VIN</label>
                <div class="col-sm-9">
                    <p class="form-control-static">@(Model.Vin ?? "N/A")</p>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label class="col-sm-3 control-label">Color</label>
                <div class="col-sm-9">
                    <p class="form-control-static">
                        @if (string.IsNullOrEmpty(Model.Color))
                        {
                        <span>N/A</span>
                        }
                        else
                        {
                        <span style="background-color: #@(Model.Color); width: 20px;" class="img-circle">&nbsp;</span>
                        }
                    </p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-3 control-label">Fuel Level</label>
                <div class="col-sm-9">
                    <div class="input-group">
                        <span class="input-group-addon">E</span>
                        <div class="form-control">
                            <div class="progress">
                                <div class="progress-bar @(Model.FuelLevelPercent < 25 ? "progress-bar-danger" : Model.FuelLevelPercent < 50 ? "progress-bar-warning" : "progress-bar-success")" role="progressbar" aria-valuenow="@Model.FuelLevelPercent" aria-valuemin="0" aria-valuemax="100" style="width: @(Model.FuelLevelPercent)%; -moz-min-width: 2em; -ms-min-width: 2em; -o-min-width: 2em; -webkit-min-width: 2em; min-width: 2em;">
                                    @(Model.FuelLevelPercent)%
                                </div>
                            </div>
                        </div>
                        <span class="input-group-addon">F</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
<hr />
<h3>Trips <small><span id="trip-number">1</span> / 10</small></h3>
<div class="row">
    <div class="col-md-4">

        @if (Model.Trips.Any())
        {
            <dl class="dl-horizontal">
                <dt>Id</dt>
                <dd id="trip-id"></dd>
                <dt>Started At</dt>
                <dd id="trip-started-at"></dd>
                <dt>Ended At</dt>
                <dd id="trip-ended-at"></dd>
                <dt>Distance</dt>
                <dd id="trip-distance"></dd>
                <dt>Duration</dt>
                <dd id="trip-duration"></dd>
                <dt>Fuel Cost</dt>
                <dd id="trip-fuel-cost"></dd>
                <dt>Score</dt>
                <dd id="trip-score"></dd>
                <dt>Tags</dt>
                <dd id="trip-tags"></dd>
            </dl>
            <ul class="pager">
                <li><a id="next-trip" href="#">Next</a></li>
                <li><a id="prev-trip" href="#">Previous</a></li>
            </ul>
        }
        else
        {
            <span>No trips for this vehicle</span>
        }
    </div>
    <div class="col-md-8">
        <div class="panel panel-default">
            <div class="panel-body" id="map-canvas"></div>
        </div>
    </div>
</div>

@section scripts
{
    <script src="//maps.googleapis.com/maps/api/js?v=3.23&libraries=geometry"></script>
    <script type="text/javascript">
        $(function() {
            // Trip Map
            var currentTripIndex = 0;
            var trips = @Html.Raw(JsonConvert.SerializeObject(Model.Trips,new JsonSerializerSettings {Formatting = Formatting.None, ContractResolver = new CamelCasePropertyNamesContractResolver()}));
            var tripPolyline;

            var markers = [];

            var map = new google.maps.Map(document.getElementById('map-canvas'), {
                center: { lat: 34.013243, lng: -118.495518 }, //TrueCar, 120 Broadway
                zoom: 12,
                scrollwheel: false
            });;

            var clearMap = function() {
                if (tripPolyline) {
                    tripPolyline.setMap(null);
                }

                if (markers.length > 0) {
                    for (var i = 0; i < markers.length; i++) {
                        markers[i].setMap(null);
                    }
                    markers = [];
                }
            };

            var addTripToMap = function(tripIndex) {
                var trip = trips[tripIndex];
                var path = trip.path;
                var startLocationLatLong = new google.maps.LatLng(trip.startLocationLatitude, trip.startLocationLongitude);
                var endLocationLatLong = new google.maps.LatLng(trip.endLocationLatitude, trip.endLocationLongitude);

                //Decode path to polyline points
                var decodedPoints;

                if (typeof path !== 'undefined' && path !== null && path !== '') {
                    decodedPoints = google.maps.geometry.encoding.decodePath(path);
                } else {
                    decodedPoints = [];
                }

                //Create polyline object
                var polyOptions = {
                    strokeColor: '#6F6FFF',
                    strokeOpacity: 1.0,
                    strokeWeight: 5,
                    path: decodedPoints
                };

                tripPolyline = new google.maps.Polyline(polyOptions);

                //Initialize the map
                tripPolyline.setMap(map);

                //Add a new marker at the new plotted point on the polyline.
                var startLocationMarker = new google.maps.Marker({
                    position: startLocationLatLong,
                    title: trip.startLocationName,
                    map: map
                });
                var startLocationInfowindow = new google.maps.InfoWindow({
                    content: trip.startLocationName,
                    width: 100
                });
                google.maps.event.addListener(startLocationMarker, 'click', function() {
                    startLocationInfowindow.open(map, startLocationMarker);
                });

                markers.push(startLocationMarker); //Store marker so we can remove it later

                //Add a new marker at the new plotted point on the polyline.
                var endLocationMarker = new google.maps.Marker({
                    position: endLocationLatLong,
                    title: trip.endLocationName,
                    map: map
                });
                var endLocationInfowindow = new google.maps.InfoWindow({
                    content: trip.endLocationName,
                    width: 130
                });
                google.maps.event.addListener(endLocationMarker, 'click', function() {
                    endLocationInfowindow.open(map, endLocationMarker);
                });

                markers.push(endLocationMarker); //Store marker so we can remove it later

                // Fit the start and end location within bounds of the map
                var bounds = new google.maps.LatLngBounds();
                bounds.extend(startLocationLatLong);
                for (var i = 0; i < decodedPoints.length; i++) {
                    bounds.extend(decodedPoints[i]);
                }
                bounds.extend(endLocationLatLong);
                map.fitBounds(bounds);
            };

            var changeTrip = function(tripIndex) {
                clearMap();
                addTripToMap(tripIndex);
                $("#trip-number").text(tripIndex + 1);
                $("#trip-id").text(trips[tripIndex].id);
                $("#trip-started-at").text(trips[tripIndex].startedAt);
                $("#trip-ended-at").text(trips[tripIndex].endedAt);
                $("#trip-distance").text(trips[tripIndex].distanceInMeters + " meters");
                $("#trip-duration").text(trips[tripIndex].duration);
                $("#trip-fuel-cost").text("$"+trips[tripIndex].fuelCostUsd);
                $("#trip-score").text(trips[tripIndex].scoreEvents);
                $("#trip-tags").text((trips[tripIndex].tags||[]).join(", "));
            };

            $('#prev-trip').on('click', function() {
                if (currentTripIndex < trips.length - 1) {
                    currentTripIndex++;
                    changeTrip(currentTripIndex);
                }
                return false;
            });


            $('#next-trip').on('click', function() {
                if (currentTripIndex > 0) {
                    currentTripIndex--;
                    changeTrip(currentTripIndex);
                }
                return false;
            });

            changeTrip(currentTripIndex);
        });
    </script>
}
